{
  "nodes": [
    {
      "parameters": {
        "jsCode": "// n8n Code node\n// Input: items[i].json = { Date, \"Value Date\", Debit, Credit, Label, Balance }\n// Output: items = [{ json: {...} }, ...]\n\n// List of keywords to check in the Label\nconst keywords = [\"XXX\", \"YYY\"];\n\n// Function to convert a number to string with comma as decimal separator\nfunction formatAmount(value) {\n    if (value === null || value === undefined || value === \"\") return \"\";\n    let num = parseFloat(value);\n    if (isNaN(num)) return \"\";\n    return num.toFixed(2).replace('.', ',');\n}\n\n// Iterate over all rows in the array\nconst output = $input.all().map(item => {\n    const row = { ...item.json }; // Copy to avoid modifying the original\n\n    // Check if the label contains any of the keywords\n    const hasKeyword = keywords.some(keyword => row.Label.includes(keyword));\n    if (hasKeyword) {\n        // Transfer the amount from Debit to Credit\n        row.Credit = row.Debit;\n        row.Debit = \"\";\n    }\n\n    // Convert amounts to string with comma as decimal separator\n    row.Debit = formatAmount(row.Debit);\n    row.Credit = formatAmount(row.Credit);\n    row.Balance = formatAmount(row.Balance);\n\n    return { json: row };\n});\n\n// Return the full array in n8n format\nreturn output;\n"
      },
      "id": "642dfc6d-dec3-400c-87fb-f1e1751b44c4",
      "name": "Format Transactions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2140,
        -200
      ]
    },
    {
      "parameters": {
        "jsCode": "/**\nUSER TUTORIAL\n======================\n\nThis workflow requires you to use your ChatGPT account to generate the **JavaScript code** from your bank PDFs. Here's how to do it:\n\n1. Open your ChatGPT account (chat.openai.com or other official interface).\n2. Use the first workflow to generate a JSON containing at least 2 PDF extracts from your bank account.\n3. Open a new conversation in ChatGPT and send the text with the prompt below.\n4. ChatGPT will return a **complete JavaScript script**, ready to copy-paste into an n8n Code node named \"Parse PDF Text\".\n5. This JavaScript code will automatically:\n   - Read the PDF text provided in the JSON input to the node.\n   - Extract each transaction with the fields:\n       - Date: first date of the transaction (DD/MM/YYYY)\n       - Value Date: second date of the transaction (DD/MM/YYYY)\n       - Amount: positive for credits, negative for debits\n       - Label: description of the transaction\n       - Debit: amount if debit\n       - Credit: amount if credit\n   - Concatenate multi-line labels\n   - Correctly handle thousand separators and decimal commas\n   - Remove all sensitive information (account numbers, names, banking references)\n   - Add an \"Errors\" field if some values are invalid\n   - Return a JSON array in n8n format, each element being an object { json: {...} }\n6. Copy the generated JavaScript code and paste it directly into the \"Parse PDF Text\" node in your workflow.\n*/\n\n/**\nPROMPT TO SEND TO CHATGPT\n=============================\n\nYou are a JavaScript developer specialized in n8n. I will provide the raw text of a bank PDF.\n\nGenerate a **complete JavaScript script** to copy-paste into an n8n Code node named \"Parse PDF Text\", which will:\n\n1. Read the PDF text (provided as JSON input to the node).\n2. Extract each transaction with the fields:\n    - \"Date\": first date on the line (DD/MM/YYYY)\n    - \"Value Date\": second date on the line (DD/MM/YYYY)\n    - \"Amount\": transaction amount (positive for credits, negative for debits)\n    - \"Label\": description of the transaction\n    - \"Debit\": amount if debit\n    - \"Credit\": amount if credit\n3. Concatenate multi-line labels.\n4. Correctly handle thousand separators and decimal commas.\n5. Remove all sensitive information (account numbers, names, banking references).\n6. Add an \"Errors\" field if some values are invalid.\n7. Return a JSON array in n8n format, each element being an object { json: {...} }.\n8. Pay attention to the name of the JSON field containing the text input (usually \"text\" if generated by n8n).\n9. All transactions should initially be in Debit.\n\nProvide the **complete JavaScript code**, ready to paste into the Code node, with clear comments explaining the logic.\n\nDo not provide any ready-made JSON, only the JavaScript code.\n\nHere is the PDF text:\n<<<INSERT JSON GENERATED BY FIRST WORKFLOW HERE>>>\n*/"
      },
      "id": "185a6808-1202-48f0-b25b-5885df3c0edb",
      "name": "Parse PDF Text",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1640,
        -200
      ]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "/outputs/finances/extraits_compte.csv",
        "options": {
          "append": true
        }
      },
      "id": "939ad0da-3b67-41da-a091-8e19d43c2d95",
      "name": "Write CSV File",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2720,
        -200
      ]
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "1023c0b2-2c65-45aa-a6ac-6f8a13685c39",
      "name": "Extract Text from PDF",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1400,
        -200
      ]
    },
    {
      "parameters": {
        "fileSelector": "/inputs/finances/pdf/*.pdf",
        "options": {}
      },
      "id": "fa0f7ff8-f025-4698-8a21-9ba7f2ac5fa3",
      "name": "Read PDF Files",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1160,
        -200
      ]
    },
    {
      "parameters": {
        "content": "## \"Parse PDF Text\"\nThe \"Parse PDF Text\" node must be generated via ChatGPT using the provided prompt (click the node to see the prompt).",
        "height": 340,
        "width": 280,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1540,
        -380
      ],
      "id": "5a26f263-24cc-4579-a93e-fd6595631429",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "61e990a9-4bd4-4e29-9be1-e264fe0c4bb3",
      "name": "Extract Text from PDF1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1400,
        -780
      ]
    },
    {
      "parameters": {
        "fileSelector": "/inputs/finances/pdf/*.pdf",
        "options": {}
      },
      "id": "17f9f8ec-3b0c-4a66-9307-34bec95b89e8",
      "name": "Read PDF Files1",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1160,
        -780
      ]
    },
    {
      "parameters": {
        "content": "## WORKFLOW for the \"Parse PDF Text\" node\nRetrieve at least 2 PDF files from your bank and extract the data. You will use it in the second workflow to generate extraction code for all PDF files from your bank.",
        "height": 280,
        "width": 600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        740,
        -900
      ],
      "id": "87b71c08-8abd-4854-b7d9-5f60cac5f9b4",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "### Output to insert into the \"Parse PDF Text\" node",
        "height": 120,
        "width": 220,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1780,
        -800
      ],
      "id": "7db70271-c906-4ef8-91b6-5aefb04ade22",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## \"Format Transaction\"\nDirectly specify in the \"Format Transaction\" node the keywords that indicate which entries should be converted to Credit. By default, all entries are in Debit, so you need to indicate exceptions and manually verify the generated file.",
        "height": 400,
        "width": 280,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2060,
        -440
      ],
      "id": "78398386-8bfa-47fc-991c-07535700b150",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "name": "Date",
              "value": "={{ $json.Date }}",
              "type": "string"
            },
            {
              "name": "Value Date",
              "value": "={{ $json['Date de valeur'] }}",
              "type": "string"
            },
            {
              "name": "Debit",
              "value": "={{ $json.Montant }}",
              "type": "string"
            },
            {
              "name": "Credit",
              "value": "=",
              "type": "string"
            },
            {
              "name": "Label",
              "value": "={{ $json['Libell√©'] }}",
              "type": "string"
            },
            {
              "name": "Balance",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "517d74c6-7874-447d-a2fc-c72ddaf08d3c",
      "name": "Edit Fields2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1880,
        -200
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c35ddc11-7ce4-49e1-8ec8-72826b95caf8",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2460,
        -200
      ]
    },
    {
      "parameters": {
        "maxItems": 2
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1620,
        -780
      ],
      "id": "56d99494-4329-48d5-87d9-3c660e5aaf8c",
      "name": "Limit1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        820,
        -480
      ],
      "id": "18b37727-0f73-4b33-9982-2f3e8bfc37a9",
      "name": "When clicking ‚ÄòTest workflow‚Äô"
    }
  ],
  "connections": {
    "Format Transactions": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse PDF Text": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text from PDF": {
      "main": [
        [
          {
            "node": "Parse PDF Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF Files": {
      "main": [
        [
          {
            "node": "Extract Text from PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text from PDF1": {
      "main": [
        [
          {
            "node": "Limit1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF Files1": {
      "main": [
        [
          {
            "node": "Extract Text from PDF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Format Transactions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Write CSV File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "07d9f6fb9036b96581a9d0e367dcb6288a2f6cbe992070a4682846ac1fe0c93d"
  }
}
